// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_api.proto

#include "backend_api.pb.h"
#include "backend_api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace backend {

static const char* BackendService_method_names[] = {
  "/backend.BackendService/GetUser",
  "/backend.BackendService/AddUser",
  "/backend.BackendService/UpdateScore",
  "/backend.BackendService/GetRanking",
};

std::unique_ptr< BackendService::Stub> BackendService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BackendService::Stub> stub(new BackendService::Stub(channel, options));
  return stub;
}

BackendService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUser_(BackendService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddUser_(BackendService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateScore_(BackendService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRanking_(BackendService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BackendService::Stub::GetUser(::grpc::ClientContext* context, const ::backend::UserRequest& request, ::backend::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::UserRequest, ::backend::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void BackendService::Stub::async::GetUser(::grpc::ClientContext* context, const ::backend::UserRequest* request, ::backend::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::UserRequest, ::backend::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void BackendService::Stub::async::GetUser(::grpc::ClientContext* context, const ::backend::UserRequest* request, ::backend::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::UserResponse>* BackendService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::backend::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::UserResponse, ::backend::UserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::UserResponse>* BackendService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::backend::UserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BackendService::Stub::AddUser(::grpc::ClientContext* context, const ::backend::NewUser& request, ::backend::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::NewUser, ::backend::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddUser_, context, request, response);
}

void BackendService::Stub::async::AddUser(::grpc::ClientContext* context, const ::backend::NewUser* request, ::backend::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::NewUser, ::backend::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddUser_, context, request, response, std::move(f));
}

void BackendService::Stub::async::AddUser(::grpc::ClientContext* context, const ::backend::NewUser* request, ::backend::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::UserResponse>* BackendService::Stub::PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::backend::NewUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::UserResponse, ::backend::NewUser, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::UserResponse>* BackendService::Stub::AsyncAddUserRaw(::grpc::ClientContext* context, const ::backend::NewUser& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BackendService::Stub::UpdateScore(::grpc::ClientContext* context, const ::backend::ScoreUpdate& request, ::backend::ScoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::ScoreUpdate, ::backend::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateScore_, context, request, response);
}

void BackendService::Stub::async::UpdateScore(::grpc::ClientContext* context, const ::backend::ScoreUpdate* request, ::backend::ScoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::ScoreUpdate, ::backend::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScore_, context, request, response, std::move(f));
}

void BackendService::Stub::async::UpdateScore(::grpc::ClientContext* context, const ::backend::ScoreUpdate* request, ::backend::ScoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::ScoreResponse>* BackendService::Stub::PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::backend::ScoreUpdate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::ScoreResponse, ::backend::ScoreUpdate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateScore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::ScoreResponse>* BackendService::Stub::AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::backend::ScoreUpdate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateScoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BackendService::Stub::GetRanking(::grpc::ClientContext* context, const ::backend::RankingRequest& request, ::backend::RankingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::RankingRequest, ::backend::RankingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRanking_, context, request, response);
}

void BackendService::Stub::async::GetRanking(::grpc::ClientContext* context, const ::backend::RankingRequest* request, ::backend::RankingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::RankingRequest, ::backend::RankingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRanking_, context, request, response, std::move(f));
}

void BackendService::Stub::async::GetRanking(::grpc::ClientContext* context, const ::backend::RankingRequest* request, ::backend::RankingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRanking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::RankingResponse>* BackendService::Stub::PrepareAsyncGetRankingRaw(::grpc::ClientContext* context, const ::backend::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::RankingResponse, ::backend::RankingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRanking_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::RankingResponse>* BackendService::Stub::AsyncGetRankingRaw(::grpc::ClientContext* context, const ::backend::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRankingRaw(context, request, cq);
  result->StartCall();
  return result;
}

BackendService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackendService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackendService::Service, ::backend::UserRequest, ::backend::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BackendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::UserRequest* req,
             ::backend::UserResponse* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackendService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackendService::Service, ::backend::NewUser, ::backend::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BackendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::NewUser* req,
             ::backend::UserResponse* resp) {
               return service->AddUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackendService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackendService::Service, ::backend::ScoreUpdate, ::backend::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BackendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::ScoreUpdate* req,
             ::backend::ScoreResponse* resp) {
               return service->UpdateScore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BackendService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BackendService::Service, ::backend::RankingRequest, ::backend::RankingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BackendService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::RankingRequest* req,
             ::backend::RankingResponse* resp) {
               return service->GetRanking(ctx, req, resp);
             }, this)));
}

BackendService::Service::~Service() {
}

::grpc::Status BackendService::Service::GetUser(::grpc::ServerContext* context, const ::backend::UserRequest* request, ::backend::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BackendService::Service::AddUser(::grpc::ServerContext* context, const ::backend::NewUser* request, ::backend::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BackendService::Service::UpdateScore(::grpc::ServerContext* context, const ::backend::ScoreUpdate* request, ::backend::ScoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BackendService::Service::GetRanking(::grpc::ServerContext* context, const ::backend::RankingRequest* request, ::backend::RankingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace backend

