// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game_service.proto

#include "game_service.pb.h"
#include "game_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace game {

static const char* GameService_method_names[] = {
  "/game.GameService/GetUser",
  "/game.GameService/AddUser",
  "/game.GameService/UpdateScore",
  "/game.GameService/StreamRankings",
};

std::unique_ptr< GameService::Stub> GameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GameService::Stub> stub(new GameService::Stub(channel, options));
  return stub;
}

GameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUser_(GameService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddUser_(GameService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateScore_(GameService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamRankings_(GameService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status GameService::Stub::GetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::UserRequest, ::game::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void GameService::Stub::async::GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::UserRequest, ::game::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void GameService::Stub::async::GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::UserResponse>* GameService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::UserResponse, ::game::UserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::UserResponse>* GameService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::AddUser(::grpc::ClientContext* context, const ::game::User& request, ::game::ResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::User, ::game::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddUser_, context, request, response);
}

void GameService::Stub::async::AddUser(::grpc::ClientContext* context, const ::game::User* request, ::game::ResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::User, ::game::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddUser_, context, request, response, std::move(f));
}

void GameService::Stub::async::AddUser(::grpc::ClientContext* context, const ::game::User* request, ::game::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* GameService::Stub::PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::ResponseMessage, ::game::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* GameService::Stub::AsyncAddUserRaw(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::game::ResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::ScoreRequest, ::game::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateScore_, context, request, response);
}

void GameService::Stub::async::UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::ScoreRequest, ::game::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScore_, context, request, response, std::move(f));
}

void GameService::Stub::async::UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateScore_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* GameService::Stub::PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::ResponseMessage, ::game::ScoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateScore_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* GameService::Stub::AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateScoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::game::RankingResponse>* GameService::Stub::StreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::game::RankingResponse>::Create(channel_.get(), rpcmethod_StreamRankings_, context, request);
}

void GameService::Stub::async::StreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest* request, ::grpc::ClientReadReactor< ::game::RankingResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::game::RankingResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamRankings_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::game::RankingResponse>* GameService::Stub::AsyncStreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::game::RankingResponse>::Create(channel_.get(), cq, rpcmethod_StreamRankings_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::game::RankingResponse>* GameService::Stub::PrepareAsyncStreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::game::RankingResponse>::Create(channel_.get(), cq, rpcmethod_StreamRankings_, context, request, false, nullptr);
}

GameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::game::UserRequest, ::game::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::UserRequest* req,
             ::game::UserResponse* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::game::User, ::game::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::User* req,
             ::game::ResponseMessage* resp) {
               return service->AddUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::game::ScoreRequest, ::game::ResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::ScoreRequest* req,
             ::game::ResponseMessage* resp) {
               return service->UpdateScore(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GameService::Service, ::game::RankingRequest, ::game::RankingResponse>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::RankingRequest* req,
             ::grpc::ServerWriter<::game::RankingResponse>* writer) {
               return service->StreamRankings(ctx, req, writer);
             }, this)));
}

GameService::Service::~Service() {
}

::grpc::Status GameService::Service::GetUser(::grpc::ServerContext* context, const ::game::UserRequest* request, ::game::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::AddUser(::grpc::ServerContext* context, const ::game::User* request, ::game::ResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::UpdateScore(::grpc::ServerContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::StreamRankings(::grpc::ServerContext* context, const ::game::RankingRequest* request, ::grpc::ServerWriter< ::game::RankingResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game

