// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: matchmaking.proto
#ifndef GRPC_matchmaking_2eproto__INCLUDED
#define GRPC_matchmaking_2eproto__INCLUDED

#include "matchmaking.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace matchmaking {

class MatchmakingService final {
 public:
  static constexpr char const* service_full_name() {
    return "matchmaking.MatchmakingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 매치메이킹
    virtual ::grpc::Status JoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::matchmaking::MatchmakingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>> AsyncJoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>>(AsyncJoinMatchmakingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>> PrepareAsyncJoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>>(PrepareAsyncJoinMatchmakingRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::matchmaking::MatchmakingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>> AsyncCancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>>(AsyncCancelMatchmakingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>> PrepareAsyncCancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>>(PrepareAsyncCancelMatchmakingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::matchmaking::MatchmakingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>> AsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>>(AsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>> PrepareAsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>>(PrepareAsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    // MMR 관련
    virtual ::grpc::Status UpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::matchmaking::MMRResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>> AsyncUpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>>(AsyncUpdateMMRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>> PrepareAsyncUpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>>(PrepareAsyncUpdateMMRRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::matchmaking::MMRResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>> AsyncGetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>>(AsyncGetMMRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>> PrepareAsyncGetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>>(PrepareAsyncGetMMRRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 매치메이킹
      virtual void JoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest* request, ::matchmaking::MatchmakingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest* request, ::matchmaking::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest* request, ::matchmaking::MatchmakingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest* request, ::matchmaking::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest* request, ::matchmaking::MatchmakingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest* request, ::matchmaking::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // MMR 관련
      virtual void UpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate* request, ::matchmaking::MMRResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate* request, ::matchmaking::MMRResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest* request, ::matchmaking::MMRResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest* request, ::matchmaking::MMRResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>* AsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>* PrepareAsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>* AsyncCancelMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>* PrepareAsyncCancelMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>* AsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MatchmakingResponse>* PrepareAsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>* AsyncUpdateMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>* PrepareAsyncUpdateMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>* AsyncGetMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::matchmaking::MMRResponse>* PrepareAsyncGetMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status JoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::matchmaking::MatchmakingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>> AsyncJoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>>(AsyncJoinMatchmakingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>> PrepareAsyncJoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>>(PrepareAsyncJoinMatchmakingRaw(context, request, cq));
    }
    ::grpc::Status CancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::matchmaking::MatchmakingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>> AsyncCancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>>(AsyncCancelMatchmakingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>> PrepareAsyncCancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>>(PrepareAsyncCancelMatchmakingRaw(context, request, cq));
    }
    ::grpc::Status GetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::matchmaking::MatchmakingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>> AsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>>(AsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>> PrepareAsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>>(PrepareAsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    ::grpc::Status UpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::matchmaking::MMRResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>> AsyncUpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>>(AsyncUpdateMMRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>> PrepareAsyncUpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>>(PrepareAsyncUpdateMMRRaw(context, request, cq));
    }
    ::grpc::Status GetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::matchmaking::MMRResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>> AsyncGetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>>(AsyncGetMMRRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>> PrepareAsyncGetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>>(PrepareAsyncGetMMRRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void JoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest* request, ::matchmaking::MatchmakingResponse* response, std::function<void(::grpc::Status)>) override;
      void JoinMatchmaking(::grpc::ClientContext* context, const ::matchmaking::JoinRequest* request, ::matchmaking::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest* request, ::matchmaking::MatchmakingResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelMatchmaking(::grpc::ClientContext* context, const ::matchmaking::CancelRequest* request, ::matchmaking::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest* request, ::matchmaking::MatchmakingResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMatchmakingStatus(::grpc::ClientContext* context, const ::matchmaking::StatusRequest* request, ::matchmaking::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate* request, ::matchmaking::MMRResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateMMR(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate* request, ::matchmaking::MMRResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest* request, ::matchmaking::MMRResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMMR(::grpc::ClientContext* context, const ::matchmaking::MMRRequest* request, ::matchmaking::MMRResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>* AsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>* PrepareAsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::JoinRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>* AsyncCancelMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>* PrepareAsyncCancelMatchmakingRaw(::grpc::ClientContext* context, const ::matchmaking::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>* AsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MatchmakingResponse>* PrepareAsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::matchmaking::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>* AsyncUpdateMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>* PrepareAsyncUpdateMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>* AsyncGetMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::matchmaking::MMRResponse>* PrepareAsyncGetMMRRaw(::grpc::ClientContext* context, const ::matchmaking::MMRRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_JoinMatchmaking_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelMatchmaking_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMatchmakingStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMMR_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMMR_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 매치메이킹
    virtual ::grpc::Status JoinMatchmaking(::grpc::ServerContext* context, const ::matchmaking::JoinRequest* request, ::matchmaking::MatchmakingResponse* response);
    virtual ::grpc::Status CancelMatchmaking(::grpc::ServerContext* context, const ::matchmaking::CancelRequest* request, ::matchmaking::MatchmakingResponse* response);
    virtual ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* context, const ::matchmaking::StatusRequest* request, ::matchmaking::MatchmakingResponse* response);
    // MMR 관련
    virtual ::grpc::Status UpdateMMR(::grpc::ServerContext* context, const ::matchmaking::MMRUpdate* request, ::matchmaking::MMRResponse* response);
    virtual ::grpc::Status GetMMR(::grpc::ServerContext* context, const ::matchmaking::MMRRequest* request, ::matchmaking::MMRResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinMatchmaking(::grpc::ServerContext* context, ::matchmaking::JoinRequest* request, ::grpc::ServerAsyncResponseWriter< ::matchmaking::MatchmakingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelMatchmaking() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CancelMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelMatchmaking(::grpc::ServerContext* context, ::matchmaking::CancelRequest* request, ::grpc::ServerAsyncResponseWriter< ::matchmaking::MatchmakingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatchmakingStatus(::grpc::ServerContext* context, ::matchmaking::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::matchmaking::MatchmakingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMMR() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMMR(::grpc::ServerContext* context, ::matchmaking::MMRUpdate* request, ::grpc::ServerAsyncResponseWriter< ::matchmaking::MMRResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMMR() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMMR(::grpc::ServerContext* context, ::matchmaking::MMRRequest* request, ::grpc::ServerAsyncResponseWriter< ::matchmaking::MMRResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_JoinMatchmaking<WithAsyncMethod_CancelMatchmaking<WithAsyncMethod_GetMatchmakingStatus<WithAsyncMethod_UpdateMMR<WithAsyncMethod_GetMMR<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::matchmaking::JoinRequest, ::matchmaking::MatchmakingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matchmaking::JoinRequest* request, ::matchmaking::MatchmakingResponse* response) { return this->JoinMatchmaking(context, request, response); }));}
    void SetMessageAllocatorFor_JoinMatchmaking(
        ::grpc::MessageAllocator< ::matchmaking::JoinRequest, ::matchmaking::MatchmakingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matchmaking::JoinRequest, ::matchmaking::MatchmakingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinMatchmaking(
      ::grpc::CallbackServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelMatchmaking() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::matchmaking::CancelRequest, ::matchmaking::MatchmakingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matchmaking::CancelRequest* request, ::matchmaking::MatchmakingResponse* response) { return this->CancelMatchmaking(context, request, response); }));}
    void SetMessageAllocatorFor_CancelMatchmaking(
        ::grpc::MessageAllocator< ::matchmaking::CancelRequest, ::matchmaking::MatchmakingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matchmaking::CancelRequest, ::matchmaking::MatchmakingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelMatchmaking(
      ::grpc::CallbackServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::matchmaking::StatusRequest, ::matchmaking::MatchmakingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matchmaking::StatusRequest* request, ::matchmaking::MatchmakingResponse* response) { return this->GetMatchmakingStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetMatchmakingStatus(
        ::grpc::MessageAllocator< ::matchmaking::StatusRequest, ::matchmaking::MatchmakingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matchmaking::StatusRequest, ::matchmaking::MatchmakingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMatchmakingStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateMMR() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::matchmaking::MMRUpdate, ::matchmaking::MMRResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matchmaking::MMRUpdate* request, ::matchmaking::MMRResponse* response) { return this->UpdateMMR(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMMR(
        ::grpc::MessageAllocator< ::matchmaking::MMRUpdate, ::matchmaking::MMRResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matchmaking::MMRUpdate, ::matchmaking::MMRResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMMR(
      ::grpc::CallbackServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMMR() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::matchmaking::MMRRequest, ::matchmaking::MMRResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::matchmaking::MMRRequest* request, ::matchmaking::MMRResponse* response) { return this->GetMMR(context, request, response); }));}
    void SetMessageAllocatorFor_GetMMR(
        ::grpc::MessageAllocator< ::matchmaking::MMRRequest, ::matchmaking::MMRResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::matchmaking::MMRRequest, ::matchmaking::MMRResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMMR(
      ::grpc::CallbackServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_JoinMatchmaking<WithCallbackMethod_CancelMatchmaking<WithCallbackMethod_GetMatchmakingStatus<WithCallbackMethod_UpdateMMR<WithCallbackMethod_GetMMR<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelMatchmaking() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CancelMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMMR() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMMR() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinMatchmaking(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelMatchmaking() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CancelMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelMatchmaking(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatchmakingStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMMR() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMMR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMMR() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMMR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JoinMatchmaking(context, request, response); }));
    }
    ~WithRawCallbackMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinMatchmaking(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelMatchmaking() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelMatchmaking(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelMatchmaking(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMatchmakingStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMatchmakingStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateMMR() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMMR(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMMR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMMR() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMMR(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMMR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matchmaking::JoinRequest, ::matchmaking::MatchmakingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matchmaking::JoinRequest, ::matchmaking::MatchmakingResponse>* streamer) {
                       return this->StreamedJoinMatchmaking(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::JoinRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinMatchmaking(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matchmaking::JoinRequest,::matchmaking::MatchmakingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelMatchmaking() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matchmaking::CancelRequest, ::matchmaking::MatchmakingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matchmaking::CancelRequest, ::matchmaking::MatchmakingResponse>* streamer) {
                       return this->StreamedCancelMatchmaking(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelMatchmaking(::grpc::ServerContext* /*context*/, const ::matchmaking::CancelRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelMatchmaking(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matchmaking::CancelRequest,::matchmaking::MatchmakingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matchmaking::StatusRequest, ::matchmaking::MatchmakingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matchmaking::StatusRequest, ::matchmaking::MatchmakingResponse>* streamer) {
                       return this->StreamedGetMatchmakingStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::matchmaking::StatusRequest* /*request*/, ::matchmaking::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMatchmakingStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matchmaking::StatusRequest,::matchmaking::MatchmakingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMMR() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matchmaking::MMRUpdate, ::matchmaking::MMRResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matchmaking::MMRUpdate, ::matchmaking::MMRResponse>* streamer) {
                       return this->StreamedUpdateMMR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRUpdate* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMMR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matchmaking::MMRUpdate,::matchmaking::MMRResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMMR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMMR() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::matchmaking::MMRRequest, ::matchmaking::MMRResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::matchmaking::MMRRequest, ::matchmaking::MMRResponse>* streamer) {
                       return this->StreamedGetMMR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMMR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMMR(::grpc::ServerContext* /*context*/, const ::matchmaking::MMRRequest* /*request*/, ::matchmaking::MMRResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMMR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::matchmaking::MMRRequest,::matchmaking::MMRResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_JoinMatchmaking<WithStreamedUnaryMethod_CancelMatchmaking<WithStreamedUnaryMethod_GetMatchmakingStatus<WithStreamedUnaryMethod_UpdateMMR<WithStreamedUnaryMethod_GetMMR<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_JoinMatchmaking<WithStreamedUnaryMethod_CancelMatchmaking<WithStreamedUnaryMethod_GetMatchmakingStatus<WithStreamedUnaryMethod_UpdateMMR<WithStreamedUnaryMethod_GetMMR<Service > > > > > StreamedService;
};

}  // namespace matchmaking


#endif  // GRPC_matchmaking_2eproto__INCLUDED
