// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game_service.proto
#ifndef GRPC_game_5fservice_2eproto__INCLUDED
#define GRPC_game_5fservice_2eproto__INCLUDED

#include "game_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace game {

class GameService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.GameService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 유저 관리
    virtual ::grpc::Status GetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::UserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>> AsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status AddUser(::grpc::ClientContext* context, const ::game::NewUser& request, ::game::UserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>> AsyncAddUser(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>>(AsyncAddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>> PrepareAsyncAddUser(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>>(PrepareAsyncAddUserRaw(context, request, cq));
    }
    // 점수 & 랭킹
    virtual ::grpc::Status UpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::game::ScoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ScoreResponse>> AsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ScoreResponse>>(AsyncUpdateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ScoreResponse>> PrepareAsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ScoreResponse>>(PrepareAsyncUpdateScoreRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLeaderboard(::grpc::ClientContext* context, const ::game::Empty& request, ::game::LeaderboardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LeaderboardResponse>> AsyncGetLeaderboard(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LeaderboardResponse>>(AsyncGetLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LeaderboardResponse>> PrepareAsyncGetLeaderboard(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LeaderboardResponse>>(PrepareAsyncGetLeaderboardRaw(context, request, cq));
    }
    // 매치메이킹
    virtual ::grpc::Status JoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::MatchmakingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>> AsyncJoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>>(AsyncJoinMatchmakingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>> PrepareAsyncJoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>>(PrepareAsyncJoinMatchmakingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::MatchmakingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>> AsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>>(AsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>> PrepareAsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>>(PrepareAsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 유저 관리
      virtual void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddUser(::grpc::ClientContext* context, const ::game::NewUser* request, ::game::UserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddUser(::grpc::ClientContext* context, const ::game::NewUser* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 점수 & 랭킹
      virtual void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate* request, ::game::ScoreResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate* request, ::game::ScoreResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLeaderboard(::grpc::ClientContext* context, const ::game::Empty* request, ::game::LeaderboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLeaderboard(::grpc::ClientContext* context, const ::game::Empty* request, ::game::LeaderboardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 매치메이킹
      virtual void JoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>* AsyncAddUserRaw(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>* PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::ScoreResponse>* AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::ScoreResponse>* PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LeaderboardResponse>* AsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LeaderboardResponse>* PrepareAsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>* AsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>* PrepareAsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>* AsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::MatchmakingResponse>* PrepareAsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::UserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>> AsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    ::grpc::Status AddUser(::grpc::ClientContext* context, const ::game::NewUser& request, ::game::UserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>> AsyncAddUser(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>>(AsyncAddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>> PrepareAsyncAddUser(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>>(PrepareAsyncAddUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::game::ScoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ScoreResponse>> AsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ScoreResponse>>(AsyncUpdateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ScoreResponse>> PrepareAsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ScoreResponse>>(PrepareAsyncUpdateScoreRaw(context, request, cq));
    }
    ::grpc::Status GetLeaderboard(::grpc::ClientContext* context, const ::game::Empty& request, ::game::LeaderboardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LeaderboardResponse>> AsyncGetLeaderboard(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LeaderboardResponse>>(AsyncGetLeaderboardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LeaderboardResponse>> PrepareAsyncGetLeaderboard(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LeaderboardResponse>>(PrepareAsyncGetLeaderboardRaw(context, request, cq));
    }
    ::grpc::Status JoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::MatchmakingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>> AsyncJoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>>(AsyncJoinMatchmakingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>> PrepareAsyncJoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>>(PrepareAsyncJoinMatchmakingRaw(context, request, cq));
    }
    ::grpc::Status GetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::MatchmakingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>> AsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>>(AsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>> PrepareAsyncGetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>>(PrepareAsyncGetMatchmakingStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddUser(::grpc::ClientContext* context, const ::game::NewUser* request, ::game::UserResponse* response, std::function<void(::grpc::Status)>) override;
      void AddUser(::grpc::ClientContext* context, const ::game::NewUser* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate* request, ::game::ScoreResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreUpdate* request, ::game::ScoreResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLeaderboard(::grpc::ClientContext* context, const ::game::Empty* request, ::game::LeaderboardResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLeaderboard(::grpc::ClientContext* context, const ::game::Empty* request, ::game::LeaderboardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void JoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, std::function<void(::grpc::Status)>) override;
      void JoinMatchmaking(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMatchmakingStatus(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::UserResponse>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::UserResponse>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::UserResponse>* AsyncAddUserRaw(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::UserResponse>* PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::game::NewUser& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::ScoreResponse>* AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::ScoreResponse>* PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreUpdate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::LeaderboardResponse>* AsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::LeaderboardResponse>* PrepareAsyncGetLeaderboardRaw(::grpc::ClientContext* context, const ::game::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>* AsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>* PrepareAsyncJoinMatchmakingRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>* AsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::MatchmakingResponse>* PrepareAsyncGetMatchmakingStatusRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_AddUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateScore_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLeaderboard_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinMatchmaking_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMatchmakingStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 유저 관리
    virtual ::grpc::Status GetUser(::grpc::ServerContext* context, const ::game::UserRequest* request, ::game::UserResponse* response);
    virtual ::grpc::Status AddUser(::grpc::ServerContext* context, const ::game::NewUser* request, ::game::UserResponse* response);
    // 점수 & 랭킹
    virtual ::grpc::Status UpdateScore(::grpc::ServerContext* context, const ::game::ScoreUpdate* request, ::game::ScoreResponse* response);
    virtual ::grpc::Status GetLeaderboard(::grpc::ServerContext* context, const ::game::Empty* request, ::game::LeaderboardResponse* response);
    // 매치메이킹
    virtual ::grpc::Status JoinMatchmaking(::grpc::ServerContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response);
    virtual ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::game::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::UserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUser(::grpc::ServerContext* context, ::game::NewUser* request, ::grpc::ServerAsyncResponseWriter< ::game::UserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateScore() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScore(::grpc::ServerContext* context, ::game::ScoreUpdate* request, ::grpc::ServerAsyncResponseWriter< ::game::ScoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLeaderboard(::grpc::ServerContext* context, ::game::Empty* request, ::grpc::ServerAsyncResponseWriter< ::game::LeaderboardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinMatchmaking(::grpc::ServerContext* context, ::game::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::MatchmakingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatchmakingStatus(::grpc::ServerContext* context, ::game::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::MatchmakingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUser<WithAsyncMethod_AddUser<WithAsyncMethod_UpdateScore<WithAsyncMethod_GetLeaderboard<WithAsyncMethod_JoinMatchmaking<WithAsyncMethod_GetMatchmakingStatus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::UserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::UserRequest* request, ::game::UserResponse* response) { return this->GetUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetUser(
        ::grpc::MessageAllocator< ::game::UserRequest, ::game::UserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::UserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::NewUser, ::game::UserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::NewUser* request, ::game::UserResponse* response) { return this->AddUser(context, request, response); }));}
    void SetMessageAllocatorFor_AddUser(
        ::grpc::MessageAllocator< ::game::NewUser, ::game::UserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::NewUser, ::game::UserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddUser(
      ::grpc::CallbackServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateScore() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::ScoreUpdate, ::game::ScoreResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::ScoreUpdate* request, ::game::ScoreResponse* response) { return this->UpdateScore(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateScore(
        ::grpc::MessageAllocator< ::game::ScoreUpdate, ::game::ScoreResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::ScoreUpdate, ::game::ScoreResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateScore(
      ::grpc::CallbackServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::Empty, ::game::LeaderboardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::Empty* request, ::game::LeaderboardResponse* response) { return this->GetLeaderboard(context, request, response); }));}
    void SetMessageAllocatorFor_GetLeaderboard(
        ::grpc::MessageAllocator< ::game::Empty, ::game::LeaderboardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::Empty, ::game::LeaderboardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLeaderboard(
      ::grpc::CallbackServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::MatchmakingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response) { return this->JoinMatchmaking(context, request, response); }));}
    void SetMessageAllocatorFor_JoinMatchmaking(
        ::grpc::MessageAllocator< ::game::UserRequest, ::game::MatchmakingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::MatchmakingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinMatchmaking(
      ::grpc::CallbackServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::MatchmakingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::UserRequest* request, ::game::MatchmakingResponse* response) { return this->GetMatchmakingStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetMatchmakingStatus(
        ::grpc::MessageAllocator< ::game::UserRequest, ::game::MatchmakingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::MatchmakingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMatchmakingStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetUser<WithCallbackMethod_AddUser<WithCallbackMethod_UpdateScore<WithCallbackMethod_GetLeaderboard<WithCallbackMethod_JoinMatchmaking<WithCallbackMethod_GetMatchmakingStatus<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateScore() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateScore() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLeaderboard(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinMatchmaking(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMatchmakingStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateScore() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateScore(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateScore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLeaderboard(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLeaderboard(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JoinMatchmaking(context, request, response); }));
    }
    ~WithRawCallbackMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinMatchmaking(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMatchmakingStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMatchmakingStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::UserRequest, ::game::UserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::UserRequest, ::game::UserResponse>* streamer) {
                       return this->StreamedGetUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::UserRequest,::game::UserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::NewUser, ::game::UserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::NewUser, ::game::UserResponse>* streamer) {
                       return this->StreamedAddUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::NewUser* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::NewUser,::game::UserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateScore() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::ScoreUpdate, ::game::ScoreResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::ScoreUpdate, ::game::ScoreResponse>* streamer) {
                       return this->StreamedUpdateScore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreUpdate* /*request*/, ::game::ScoreResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateScore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::ScoreUpdate,::game::ScoreResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLeaderboard : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLeaderboard() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::Empty, ::game::LeaderboardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::Empty, ::game::LeaderboardResponse>* streamer) {
                       return this->StreamedGetLeaderboard(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLeaderboard() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLeaderboard(::grpc::ServerContext* /*context*/, const ::game::Empty* /*request*/, ::game::LeaderboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLeaderboard(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::Empty,::game::LeaderboardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinMatchmaking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinMatchmaking() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::UserRequest, ::game::MatchmakingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::UserRequest, ::game::MatchmakingResponse>* streamer) {
                       return this->StreamedJoinMatchmaking(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JoinMatchmaking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinMatchmaking(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinMatchmaking(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::UserRequest,::game::MatchmakingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMatchmakingStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMatchmakingStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::UserRequest, ::game::MatchmakingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::UserRequest, ::game::MatchmakingResponse>* streamer) {
                       return this->StreamedGetMatchmakingStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMatchmakingStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMatchmakingStatus(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::MatchmakingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMatchmakingStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::UserRequest,::game::MatchmakingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUser<WithStreamedUnaryMethod_AddUser<WithStreamedUnaryMethod_UpdateScore<WithStreamedUnaryMethod_GetLeaderboard<WithStreamedUnaryMethod_JoinMatchmaking<WithStreamedUnaryMethod_GetMatchmakingStatus<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUser<WithStreamedUnaryMethod_AddUser<WithStreamedUnaryMethod_UpdateScore<WithStreamedUnaryMethod_GetLeaderboard<WithStreamedUnaryMethod_JoinMatchmaking<WithStreamedUnaryMethod_GetMatchmakingStatus<Service > > > > > > StreamedService;
};

}  // namespace game


#endif  // GRPC_game_5fservice_2eproto__INCLUDED
