// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game_service.proto
#ifndef GRPC_game_5fservice_2eproto__INCLUDED
#define GRPC_game_5fservice_2eproto__INCLUDED

#include "game_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace game {

class GameService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.GameService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 유저 정보를 가져오는 RPC
    virtual ::grpc::Status GetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::UserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>> AsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    // 유저를 추가하는 RPC
    virtual ::grpc::Status AddUser(::grpc::ClientContext* context, const ::game::User& request, ::game::ResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>> AsyncAddUser(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>>(AsyncAddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>> PrepareAsyncAddUser(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>>(PrepareAsyncAddUserRaw(context, request, cq));
    }
    // 점수를 업데이트하는 RPC
    virtual ::grpc::Status UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::game::ResponseMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>> AsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>>(AsyncUpdateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>> PrepareAsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>>(PrepareAsyncUpdateScoreRaw(context, request, cq));
    }
    // 랭킹을 스트리밍하는 RPC
    std::unique_ptr< ::grpc::ClientReaderInterface< ::game::RankingResponse>> StreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::game::RankingResponse>>(StreamRankingsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::game::RankingResponse>> AsyncStreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::game::RankingResponse>>(AsyncStreamRankingsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::game::RankingResponse>> PrepareAsyncStreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::game::RankingResponse>>(PrepareAsyncStreamRankingsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 유저 정보를 가져오는 RPC
      virtual void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 유저를 추가하는 RPC
      virtual void AddUser(::grpc::ClientContext* context, const ::game::User* request, ::game::ResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddUser(::grpc::ClientContext* context, const ::game::User* request, ::game::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 점수를 업데이트하는 RPC
      virtual void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 랭킹을 스트리밍하는 RPC
      virtual void StreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest* request, ::grpc::ClientReadReactor< ::game::RankingResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::UserResponse>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>* AsyncAddUserRaw(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>* PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>* AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::ResponseMessage>* PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::game::RankingResponse>* StreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::game::RankingResponse>* AsyncStreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::game::RankingResponse>* PrepareAsyncStreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::game::UserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>> AsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>>(AsyncGetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::UserResponse>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    ::grpc::Status AddUser(::grpc::ClientContext* context, const ::game::User& request, ::game::ResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>> AsyncAddUser(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>>(AsyncAddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>> PrepareAsyncAddUser(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>>(PrepareAsyncAddUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::game::ResponseMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>> AsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>>(AsyncUpdateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>> PrepareAsyncUpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>>(PrepareAsyncUpdateScoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::game::RankingResponse>> StreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::game::RankingResponse>>(StreamRankingsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::game::RankingResponse>> AsyncStreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::game::RankingResponse>>(AsyncStreamRankingsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::game::RankingResponse>> PrepareAsyncStreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::game::RankingResponse>>(PrepareAsyncStreamRankingsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUser(::grpc::ClientContext* context, const ::game::UserRequest* request, ::game::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddUser(::grpc::ClientContext* context, const ::game::User* request, ::game::ResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void AddUser(::grpc::ClientContext* context, const ::game::User* request, ::game::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response, std::function<void(::grpc::Status)>) override;
      void UpdateScore(::grpc::ClientContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamRankings(::grpc::ClientContext* context, const ::game::RankingRequest* request, ::grpc::ClientReadReactor< ::game::RankingResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::UserResponse>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::UserResponse>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::game::UserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* AsyncAddUserRaw(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* PrepareAsyncAddUserRaw(::grpc::ClientContext* context, const ::game::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* AsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::ResponseMessage>* PrepareAsyncUpdateScoreRaw(::grpc::ClientContext* context, const ::game::ScoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::game::RankingResponse>* StreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request) override;
    ::grpc::ClientAsyncReader< ::game::RankingResponse>* AsyncStreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::game::RankingResponse>* PrepareAsyncStreamRankingsRaw(::grpc::ClientContext* context, const ::game::RankingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_AddUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateScore_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamRankings_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 유저 정보를 가져오는 RPC
    virtual ::grpc::Status GetUser(::grpc::ServerContext* context, const ::game::UserRequest* request, ::game::UserResponse* response);
    // 유저를 추가하는 RPC
    virtual ::grpc::Status AddUser(::grpc::ServerContext* context, const ::game::User* request, ::game::ResponseMessage* response);
    // 점수를 업데이트하는 RPC
    virtual ::grpc::Status UpdateScore(::grpc::ServerContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response);
    // 랭킹을 스트리밍하는 RPC
    virtual ::grpc::Status StreamRankings(::grpc::ServerContext* context, const ::game::RankingRequest* request, ::grpc::ServerWriter< ::game::RankingResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::game::UserRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::UserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUser(::grpc::ServerContext* context, ::game::User* request, ::grpc::ServerAsyncResponseWriter< ::game::ResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateScore() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScore(::grpc::ServerContext* context, ::game::ScoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::ResponseMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamRankings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamRankings() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamRankings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRankings(::grpc::ServerContext* /*context*/, const ::game::RankingRequest* /*request*/, ::grpc::ServerWriter< ::game::RankingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRankings(::grpc::ServerContext* context, ::game::RankingRequest* request, ::grpc::ServerAsyncWriter< ::game::RankingResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUser<WithAsyncMethod_AddUser<WithAsyncMethod_UpdateScore<WithAsyncMethod_StreamRankings<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::UserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::UserRequest* request, ::game::UserResponse* response) { return this->GetUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetUser(
        ::grpc::MessageAllocator< ::game::UserRequest, ::game::UserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::UserRequest, ::game::UserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::User, ::game::ResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::User* request, ::game::ResponseMessage* response) { return this->AddUser(context, request, response); }));}
    void SetMessageAllocatorFor_AddUser(
        ::grpc::MessageAllocator< ::game::User, ::game::ResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::User, ::game::ResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddUser(
      ::grpc::CallbackServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateScore() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::ScoreRequest, ::game::ResponseMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::ScoreRequest* request, ::game::ResponseMessage* response) { return this->UpdateScore(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateScore(
        ::grpc::MessageAllocator< ::game::ScoreRequest, ::game::ResponseMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::ScoreRequest, ::game::ResponseMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateScore(
      ::grpc::CallbackServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamRankings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamRankings() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::game::RankingRequest, ::game::RankingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::RankingRequest* request) { return this->StreamRankings(context, request); }));
    }
    ~WithCallbackMethod_StreamRankings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRankings(::grpc::ServerContext* /*context*/, const ::game::RankingRequest* /*request*/, ::grpc::ServerWriter< ::game::RankingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::game::RankingResponse>* StreamRankings(
      ::grpc::CallbackServerContext* /*context*/, const ::game::RankingRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetUser<WithCallbackMethod_AddUser<WithCallbackMethod_UpdateScore<WithCallbackMethod_StreamRankings<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateScore() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamRankings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamRankings() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamRankings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRankings(::grpc::ServerContext* /*context*/, const ::game::RankingRequest* /*request*/, ::grpc::ServerWriter< ::game::RankingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateScore() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamRankings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamRankings() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamRankings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRankings(::grpc::ServerContext* /*context*/, const ::game::RankingRequest* /*request*/, ::grpc::ServerWriter< ::game::RankingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamRankings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateScore() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateScore(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateScore(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamRankings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamRankings() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamRankings(context, request); }));
    }
    ~WithRawCallbackMethod_StreamRankings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamRankings(::grpc::ServerContext* /*context*/, const ::game::RankingRequest* /*request*/, ::grpc::ServerWriter< ::game::RankingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamRankings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::UserRequest, ::game::UserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::UserRequest, ::game::UserResponse>* streamer) {
                       return this->StreamedGetUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::game::UserRequest* /*request*/, ::game::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::UserRequest,::game::UserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::User, ::game::ResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::User, ::game::ResponseMessage>* streamer) {
                       return this->StreamedAddUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddUser(::grpc::ServerContext* /*context*/, const ::game::User* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::User,::game::ResponseMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateScore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateScore() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::ScoreRequest, ::game::ResponseMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::ScoreRequest, ::game::ResponseMessage>* streamer) {
                       return this->StreamedUpdateScore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateScore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateScore(::grpc::ServerContext* /*context*/, const ::game::ScoreRequest* /*request*/, ::game::ResponseMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateScore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::ScoreRequest,::game::ResponseMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUser<WithStreamedUnaryMethod_AddUser<WithStreamedUnaryMethod_UpdateScore<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamRankings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamRankings() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::game::RankingRequest, ::game::RankingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::game::RankingRequest, ::game::RankingResponse>* streamer) {
                       return this->StreamedStreamRankings(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamRankings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamRankings(::grpc::ServerContext* /*context*/, const ::game::RankingRequest* /*request*/, ::grpc::ServerWriter< ::game::RankingResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamRankings(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::game::RankingRequest,::game::RankingResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamRankings<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUser<WithStreamedUnaryMethod_AddUser<WithStreamedUnaryMethod_UpdateScore<WithSplitStreamingMethod_StreamRankings<Service > > > > StreamedService;
};

}  // namespace game


#endif  // GRPC_game_5fservice_2eproto__INCLUDED
